#!/usr/bin/perl

use strict;
use warnings;

use Cfg::CLI qw(debug);
use File::Which;
use Net::Domain qw(hostname hostdomain);
use Sh qw(cat);

## Adam's config packages.  Listed in suggested installation order.

## First we define the source repository or working directory.  We
## only support cvs so far.
$ENV{CVSROOT} = 'adam@cvs.adamspiers.org:/home/adam/.CVSROOT';
$ENV{CVSROOT} = '/home/adam/.CVSROOT' if hostname() eq 'arctic';
my $cvsroot  = $ENV{CVSROOT};
my $cvs_wd   = "$ENV{HOME}/.cvs";
my $git_root = "$ENV{HOME}/.git";
my $svn_root = "$ENV{HOME}/.svn";
my $hg_root  = "$ENV{HOME}/.hg";
my $bzr_root = "$ENV{HOME}/.bzr";
my $baz_root = "$ENV{HOME}/.baz";

my $localhost_nick_file = "$ENV{HOME}/.localhost-nickname";
chomp(my $host_nickname = safe_cat($localhost_nick_file));
warn "$localhost_nick_file empty; skipping some packages.\n"
  unless $host_nickname;

my $secure_machine = $host_nickname =~ /^(arctic|atlantic|pacific|indian|southern|d600|coltrane|linuxmce|adriatic)$/;
unless ($secure_machine) {
  debug(1, "# ! WARNING! Not on a secure machine; skipping secure packages");
}

## register_cvs_pkgs arguments:
##   1. Source repository label as defined above.
##   2. Column 1: Source directory within the repository or working dir.
##      Column 2: Target namespace as controlled by stow or similar
##                (therefore must be unique).

#############################################################
register new Cfg::Section 'boot' => "Bootstrapping";
secure_multi_register_cvs(<<EOF);
    config/META                            META

    config/shell-env                       shell-env

    # N.B. cvs requires glob-to-re from shell-env
    config/dev-tools/cvs                   cvs

    # This one required to stop stow folding some high-level
    # directories which are safer left unfolded (in case I
    # accidentally put new files in there and they unintentionally go
    # in a package directory).
    config/ANTIFOLD                        ANTIFOLD

    personal/pub/config/shell-env          shell-env.adam_spiers.pub
    personal/sec/config/shell-env          shell-env.adam_spiers.sec
    config/dev-tools/perl/mine             perl+mine
    config/dev-tools/perl/doc              perl+doc
    config/dev-tools/rpm                   rpm
EOF

#############################################################
register new Cfg::Section 'basics' => "Bare essentials";
secure_multi_register_cvs(<<EOF);
    config/shell-apps/ssh                  ssh
    personal/sec/config/shell-apps/ssh     ssh.adam_spiers.sec
    config/shell-apps/screen               screen
    config/shell-apps/emacs                emacs
EOF

# FIXME: reference my local org-mode git repo instead ...
#
# register new Cfg::Pkg::Git $git_root,
#   'orgmode' =>
#     'git://repo.or.cz/org-mode.git',
#     'lib/emacs/major-modes/org-mode.git';

secure_multi_register('Cfg::Pkg::Git', $git_root, <<EOF);
  cucumber-el  git://github.com/michaelklishin/cucumber.el.git lib/emacs/major-modes/cucumber
  elisp-behave git://github.com/tomtt/elisp_behave.git         lib/emacs/major-modes/elisp-behave
  emacs-rails  git://github.com/remvee/emacs-rails.git         lib/emacs/major-modes/emacs-rails.remvee.git
  yasnippets-rails git://github.com/eschulte/yasnippets-rails.git lib/emacs/minor-modes/yasnippets-rails
  remember     git://repo.or.cz/remember-el.git              lib/emacs/major-modes/remember.git
EOF

# register new Cfg::Pkg::Svn $svn_root,
#   'yasnippet-svn' => 'http://yasnippet.googlecode.com/svn/trunk/';

#############################################################
register new Cfg::Section 'dist' => "Distribution-specific";
if (-e "/etc/SuSE-release") {
  register new Cfg::Pkg::CVS $cvsroot, $cvs_wd, "config/dists/SUSE", "SUSE";
  my $rel = safe_cat("/etc/SuSE-release");
  if ($rel =~ /SUSE Linux.*VERSION *= *10/is) {
    register new Cfg::Pkg::CVS $cvsroot, $cvs_wd, "config/dists/SL10", "SL10";
  }
  elsif ($rel =~ /Novell Linux Desktop 9/i) {
    register new Cfg::Pkg::CVS $cvsroot, $cvs_wd, "config/dists/NLD9", "NLD9";
  }
}
elsif (-e "/etc/redhat-release") {
  my $rel = safe_cat("/etc/redhat-release");
  if ($rel =~ /Fedora Core release 4/i) {
    register new Cfg::Pkg::CVS $cvsroot, $cvs_wd, "config/dists/FC4", "FC4";
  }
}
elsif (-e "/etc/debian_version") {
  my $rel = safe_cat("/etc/debian_version");
  # nothing for Debian yet
}
else {
  die "Didn't find /etc/redhat-release or /etc/SuSE-release!\n";
}

#############################################################
register new Cfg::Section 'X' => "X environment";

if (which('xinit')) {
  secure_multi_register_cvs(<<EOF);
    config/Xwindows/SESSION                SESSION
    config/Xwindows/xwrits                 xwrits
    config/Xwindows/fonts                  fonts
    config/Xwindows/gkrellm                gkrellm
    config/Xwindows/rxvt                   rxvt
    config/Xwindows/graphics               graphics
    config/Xwindows/audio                  audio
EOF
}

if (which('kdeinit') or which('kdeinit4')) {
  secure_multi_register_cvs(<<EOF);
    config/Xwindows/kde                    kde
EOF
}

#############################################################
register new Cfg::Section 'mail' => "Mail";
secure_multi_register_cvs(<<EOF);
    config/shell-apps/mutt                 mutt

# depends on shell-env for sort-by-filename
    personal/pub/config/shell-apps/mutt    mutt.pub

    personal/sec/config/shell-apps/mutt    mutt.sec
    config/shell-apps/mailcap              mailcap
    config/shell-apps/gnupg                gnupg
#    config/shell-apps/crm114               crm114-conf.sec
EOF

#register new Cfg::Pkg::Port 'libtre-0.7.4' => 'libtre';
#register new Cfg::Pkg::Port 'libtre-0.7.5' => 'libtre';
#register new Cfg::Pkg::Port 'crm114-20061103' => 'crm114';
#register new Cfg::Pkg::Port 'crm114-20070301' => 'crm114';
#register new Cfg::Pkg::Port 'crm114-20070810' => 'crm114';
#register new Cfg::Pkg::Port 'crm114-wget'     => 'crm114-wget';
#register new Cfg::Pkg::Port 'crm114-20080502' => 'crm114-ger';
#alias crm => qw(libtre crm114 crm114-conf.sec);
#register new Cfg::Pkg::Port 'namazu-2.0.17' => 'namazu-2.0.17';

#############################################################
register new Cfg::Section std => "Getting more comfortable";
secure_multi_register_cvs(<<EOF);
    config/shell-apps/lftp                 lftp
    config/shell-apps/ncftp                ncftp
    config/shell-apps/wscan                wscan
    config/dev-tools/perl/pmtools          pmtools
    config/dev-tools/ruby                  ruby
    config/dev-tools/java                  java
    config/dev-tools/hg                    hg
    personal/pub/config/dev-tools/hg       hg.pub
    config/dev-tools/git                   git
    config/dev-tools/svn                   svn
    config/dev-tools/arch                  arch
    config/dev-tools/darcs                 darcs
    config/dev-tools/dup-files             dup-files
    config/shell-apps/watchlogs            watchlogs
EOF

register new Cfg::Pkg::Bzr $bzr_root, 'dvc',
  'http://bzr.xsteve.at/dvc/',
# 'http://www-verimag.imag.fr/~moy/bzr/dvc/moy/',
  'lib/emacs/major-modes/$DST';

#############################################################
$ENV{PATH} = "/sbin:$ENV{PATH}";
system("moosehall-connection-p 2>/dev/null");
if ($? >> 8 == 0 || $ENV{MOOSEHALL}) {
  register new Cfg::Section 'moosehall' => "For moosehall only";
  secure_multi_register_cvs(<<EOF);
    personal/pub/config/moosehall/shell-env             moosehall+shell-env
    personal/pub/config/moosehall/xsession              moosehall+xsession
    personal/pub/config/moosehall/shell-apps/ssh        moosehall+ssh.pub
    personal/pub/config/moosehall/shell-apps/watchlogs  moosehall+watchlogs.pub
    personal/pub/config/moosehall/ldap                  moosehall+ldap.pub
    personal/sec/config/moosehall/ldap                  moosehall+ldap.sec
EOF
}

#############################################################
if (-e "$ENV{HOME}/roaming") {
  secure_multi_register_cvs(<<EOF);
    config/pim                             pim
    personal/sec/config/pim                pim.sec
EOF
}

#############################################################
if (-e "$ENV{HOME}/ifolder" or hostdomain() =~ /lab\.novell\.com$/) {
  register new Cfg::Section 'novell' => "For work only";
  secure_multi_register_cvs(<<EOF);
    config/work-tools                      work-tools
    personal/pub/config/novell/shell-env   novell+shell-env.pub
    personal/pub/config/novell/shell-apps/emacs  novell+emacs.pub
    personal/pub/config/novell/mail        novell+mail.pub
    personal/pub/config/novell/vpn         novell+vpn.pub
    personal/sec/config/novell/mail        novell+mail.sec
    personal/sec/config/novell/vpn         novell+vpn.sec
EOF
}

#############################################################
if ($host_nickname =~ /^atlantic/) {
  register new Cfg::Section 'play' => "For play only";
  secure_multi_register_cvs(<<EOF);
    config/Xwindows/backgrounds            backgrounds
    config/Xwindows/xchat                  xchat
    config/shell-apps/namazu               namazu
EOF
}

#############################################################
## To obtain warnings requires a checkout, so you may want
## to leave these commented.
if ($secure_machine) {
    secure_multi_register_cvs(<<EOF);
   config/personal-interest               personal-interest
EOF
}

if ($host_nickname =~ /^atlantic/) {
  register new Cfg::Section 'deprecated' =>
    "Deprecated; warn if still using this stuff.";

  # TODO: retire these:
  # config/Xwindows/Eterm                  Eterm
  # config/Xwindows/sawfish                sawfish

  secure_multi_register_cvs(<<EOF);
    config/shell-apps/htmltidy             htmltidy
    config/shell-apps/palm                 palm
    config.RETIRED/Xwindows/galeon         galeon
    config.RETIRED/Xwindows/gnome          gnome
    config.RETIRED/Xwindows/netscape       netscape
    config.RETIRED/term                    term
    config.RETIRED/shell-apps/mh           mh
    config.RETIRED/shell-apps/sdf          sdf
    config.RETIRED/shell-apps/bk2site      bk2site
    config.RETIRED/shell-apps/lynx         lynx
    config.RETIRED/shell-apps/ytalk        ytalk
EOF
}

#alias 'mail' => qw(mutt mutt.pub mutt.sec novell+mail.pub novell+mail.sec);

register new Cfg::Pkg::Mercurial $hg_root, 'hgtest',
  "$ENV{HOME}/tmp/upstream/hgtest";

#############################################################

sub secure_multi_register {
  my ($backend, @args) = @_;
  my $block = pop @args;
  $block =~ s!^\s*personal/sec/.*!!m unless $secure_machine;
  register multi $backend @args, $block;
}

sub secure_multi_register_git {
  secure_multi_register 'Cfg::Pkg::Git', $git_root, @_;
}

sub secure_multi_register_cvs {
  secure_multi_register 'Cfg::Pkg::CVS', $cvsroot, $cvs_wd, @_;
}

1;

__DATA__

TODO - things to be added:

dependencies

move all 3rd party emacs packages out to separate packages
  color-theme
  org
  epg
  etc.

find-recursive.el
snippet.el
