#!/usr/bin/perl

use strict;
use warnings;

use Net::Domain qw(hostname);
use Sh qw(cat);

## Adam's config packages.  Listed in suggested installation order.

## First we define the source repository or working directory.  We
## only support cvs so far.
$ENV{CVSROOT} = 'adam@f5.mandolinarchive.com:/home/adam/.CVSROOT';
$ENV{CVSROOT} = '/home/adam/.CVSROOT' if hostname() eq 'f5';
my $cvsroot  = $ENV{CVSROOT};
my $cvs_wd   = "$ENV{HOME}/.cvs";
my $baz_root = "$ENV{HOME}/.baz";
my $bzr_root = "$ENV{HOME}/.bzr";

## register_cvs_pkgs arguments:
##   1. Source repository label as defined above.
##   2. Column 1: Source directory within the repository or working dir.
##      Column 2: Target namespace as controlled by stow or similar
##                (therefore must be unique).

register new Cfg::Section 'boot' => "Bootstrapping";
register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
    config/dev-tools/cvs                   cvs
    config/dev-tools/arch                  arch
    config/META                            META
# This one required to stop stow folding some high-level directories
# which are safer left unfolded (in case I accidentally put new files
# in there and they unintentionally go in a package directory).
    config/ANTIFOLD                        ANTIFOLD
    config/shell-env                       shell-env
    personal/pub/config/shell-env          shell-env.adam_spiers.pub
    personal/sec/config/shell-env          shell-env.adam_spiers.sec
    config/dev-tools/perl/mine             perl+mine
    config/dev-tools/perl/doc              perl+doc
    config/dev-tools/rpm                   rpm
EOF

register new Cfg::Section 'basics' => "Bare essentials";
register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
    config/shell-apps/ssh                  ssh
    personal/sec/config/shell-apps/ssh     ssh.adam_spiers.sec
    config/shell-apps/screen               screen
    config/shell-apps/emacs                emacs
EOF

my $localhost_nick_file = "$ENV{HOME}/.localhost-nickname";
chomp(my $host_suffix = safe_cat($localhost_nick_file));
if ($host_suffix) {
  register new Cfg::Pkg::Baz $baz_root,
    'muse-mwolson' =>
      'mwolson@gnu.org--2006',
      'muse--main--1.0',
      'lib/emacs/major-modes/$REV';

#   register new Cfg::Pkg::Baz $baz_root,
#     'muse-aspiers' =>
#       "arch\@adamspiers.org--upstream-2006-$host_suffix",
#       'muse--main--1.0',
#       'lib/emacs/major-modes/$REV';

  alias muse => qw(muse-mwolson emacs);

#   register new Cfg::Pkg::Baz $baz_root,
#     xkeycaps => 
#     "arch\@adamspiers.org--upstream-2006-$host_suffix",
#     'xkeycaps--aspiers--2.46',
#     'lib/emacs/xkeycaps';
}
else {
  warn "$localhost_nick_file empty; skipping some packages.\n";
}

register new Cfg::Section 'dist' => "Distribution-specific";
if (-e "/etc/SuSE-release") {
  my $rel = safe_cat("/etc/SuSE-release");
  if ($rel =~ /SUSE Linux.*VERSION *= *10/is) {
    register new Cfg::Pkg::CVS $cvsroot, $cvs_wd, "config/dists/SL10", "SL10";
  }
  elsif ($rel =~ /Novell Linux Desktop 9/i) {
    register new Cfg::Pkg::CVS $cvsroot, $cvs_wd, "config/dists/NLD9", "NLD9";
  }
}
elsif (-e "/etc/redhat-release") {
  my $rel = safe_cat("/etc/redhat-release");
  if ($rel =~ /Fedora Core release 4/i) {
    register new Cfg::Pkg::CVS $cvsroot, $cvs_wd, "config/dists/FC4", "FC4";
  }
}
else {
  die "Didn't find /etc/redhat-release or /etc/SuSE-release!\n";
}

register new Cfg::Section 'X' => "X environment";
register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
    config/Xwindows/SESSION                SESSION
    config/Xwindows/kde                    kde
    config/shell-apps/watchlogs            watchlogs
    config/Xwindows/Eterm                  Eterm
    config/Xwindows/gkrellm                gkrellm
    config/Xwindows/sawfish                sawfish
    config/Xwindows/fonts                  fonts
EOF

register new Cfg::Section 'mail' => "Mail";
register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
    config/shell-apps/mutt                 mutt
    personal/pub/config/shell-apps/mutt    mutt.pub
    personal/sec/config/shell-apps/mutt    mutt.sec
    config/shell-apps/mailcap              mailcap
    config/shell-apps/gnupg                gnupg
    config/shell-apps/crm114               crm114-conf.sec
EOF

register new Cfg::Pkg::Port 'libtre-0.7.4' => 'libtre';
register new Cfg::Pkg::Port 'crm114-20061103' => 'crm114';
alias crm => qw(libtre crm114 crm114-conf.sec);

register new Cfg::Section std => "Getting more comfortable";
register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
    config/shell-apps/lftp                 lftp
    config/shell-apps/ncftp                ncftp
    config/shell-apps/wscan                wscan
    config/dev-tools/perl/pmtools          pmtools
    config/dev-tools/ruby                  ruby
    config/dev-tools/svn                   svn
    config/dev-tools/darcs                 darcs
    personal/pub/config/dev-tools/hg       hg.pub
    config/dev-tools/dup-files             dup-files
EOF

register new Cfg::Pkg::Bzr $bzr_root, 'dvc',
  'http://bzr.xsteve.at/dvc/',
# 'http://www-verimag.imag.fr/~moy/bzr/dvc/moy/',
  'lib/emacs/major-modes/$DST';

$ENV{PATH} = "/sbin:$ENV{PATH}";
system("moosehall-connection-p 2>/dev/null");
if ($? >> 8 == 0 || $ENV{MOOSEHALL}) {
  register new Cfg::Section 'moosehall' => "For moosehall only";
  register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
    personal/pub/config/moosehall/shell-env       moosehall+shell-env
    personal/pub/config/moosehall/xsession        moosehall+xsession
    personal/pub/config/moosehall/shell-apps/ssh  moosehall+ssh.pub
    personal/pub/config/moosehall/ldap            moosehall+ldap.pub
    personal/sec/config/moosehall/ldap            moosehall+ldap.sec
EOF
}

if (-e "$ENV{HOME}/ifolder") {
  register new Cfg::Section 'novell' => "For work only";
  register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
    config/work-tools                      work-tools
    personal/pub/config/novell/shell-env   novell+shell-env.pub
    personal/pub/config/novell/shell-apps/emacs  novell+emacs.pub
    personal/pub/config/novell/mail        novell+mail.pub
    personal/pub/config/novell/vpn         novell+vpn.pub
    personal/sec/config/novell/mail        novell+mail.sec
    personal/sec/config/novell/vpn         novell+vpn.sec
EOF
}

register new Cfg::Section 'play' => "For play only";
register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
    config/shell-apps/htmltidy             htmltidy
    config/shell-apps/palm                 palm
    config/Xwindows/graphics               graphics
    config/Xwindows/audio                  audio
    config/Xwindows/xwrits                 xwrits
    config/Xwindows/backgrounds            backgrounds
    config/Xwindows/rxvt                   rxvt
    config/Xwindows/xchat                  xchat
EOF

## To obtain warnings requires a checkout, so you may want
## to leave these commented.
if (hostname() =~ /^atlantic/) {
  register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
   config/personal-interest               personal-interest
EOF

  register new Cfg::Section 'deprecated' =>
    "Deprecated; warn if still using this stuff.";
  register multi Cfg::Pkg::CVS $cvsroot, $cvs_wd, <<EOF;
    config.RETIRED/Xwindows/galeon         galeon
    config.RETIRED/Xwindows/gnome          gnome
    config.RETIRED/Xwindows/netscape       netscape
    config.RETIRED/term                    term
    config.RETIRED/shell-apps/mh           mh
    config.RETIRED/shell-apps/sdf          sdf
    config.RETIRED/shell-apps/bk2site      bk2site
    config.RETIRED/shell-apps/lynx         lynx
    config.RETIRED/shell-apps/ytalk        ytalk
EOF
}

#alias 'mail' => qw(mutt mutt.pub mutt.sec novell+mail.pub novell+mail.sec);

1;
