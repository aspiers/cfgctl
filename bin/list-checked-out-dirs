#!/usr/bin/perl -w

# For comparing my repository with checked out bits,
# see also list-cvs-dirs.

use strict;

use Getopt::Long;

my %opts = ();
GetOptions(\%opts, 'help|h', 'missing|m', 'all|a', 'tops|t');

usage() if $opts{help};

my @repository_dirs = split /\n/, `list-cvs-dirs`;

my (%existing, %missing);
foreach my $dir (@repository_dirs) {
  if (-d "$dir/CVS") {
    $existing{$dir}++;
    next;
  }

  next if guessed($dir, sub { s!^software/perl5(/?)!perl$1! });
  next if guessed($dir, sub { s!^software(/?)!perl$1!       });

  $missing{$dir}++;
}

delete_subdirs() if $opts{tops};
output();

sub guessed {
  my ($dir, $guesser) = @_;

  $_ = $dir;
  &$guesser();
  if (-d "$_/CVS") {
    $existing{$_}++;
    return 1;
  }

  return 0;
}

sub delete_subdirs {
  delete_parents(\%existing);
  delete_parents(\%missing);
}

sub delete_parents {
  my ($hash) = @_;

  my @subdirs = ();
  foreach my $dir (keys %$hash) {
    my $parent = $dir;
    next unless $parent =~ s!/[^/]+?$!!;
    if ($existing{$parent}) {
#      print "deleting $dir ($parent)\n";
      push @subdirs, $dir;
    }
  }

  delete @$hash{@subdirs};
}

sub output {
  foreach my $dir (sort (keys %existing, keys %missing)) {
    print "$dir\n" if $existing{$dir} && ! $opts{missing};
    if ($missing{$dir}) {
      print "# " if $opts{all};
      print "$dir\n" if $opts{all} || $opts{missing};
    }
  }
}

sub usage {
  die <<EOF;
Usage: $0 [ <options> ]
  -a, --all       All, existing or missing
  -m, --missing   Only missing directories
  -t, --tops      Only top directories; exclude subdirectories

Defaults to just existing directories.
EOF
}
