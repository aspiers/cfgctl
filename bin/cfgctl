#!/usr/bin/perl

=head1 NAME

cfgctl - configuration file controller

=head1 SYNOPSIS

    $ cfgctl [options] [pkg [pkg...]]

By default, installs the listed config packages, or all if none are
specified.

Options [defaults in square brackets]:

  -u, --update               Update or fetch the chosen packages, then install
  -D, --delete               Delete the chosen packages, not install
  -n, --dry-run              Don't touch the disk

  -s, --sources              Only list source packages
  -d, --destinations         Only list destination packages

  -p, --pkg-dir=DIR          Change source package directory [$cfg{PKG_DIR}]
  -t, --target=TARGET-DIR    Change target directory [$cfg{TARGET_DIR}]
  -m, --map=MAP-FILE         Change config map file [$cfg{MAP_FILE}]

  -v, --verbose              Increase verbosity
  -r, --remove-dangling      If conflicts with dangling symlinks
                             are found, delete them.
  -T, --thorough             Don't prune subdirectories not in packages.
                             This may leave symlinks pointing to old
                             dirs which used to be in packages, but is
                             a lot slower.

=cut

# Now we define some sensible default settings for the top-level
# container directories corresponding to each level described in the
# architecture document:

# (1) Where the all-important end-user symlinks go.
$cfg{TARGET_DIR}  = $ENV{HOME};

# (2) Package directory ("stow directory" in stow terminology).
#     stow requires all packages live immediately under this.
$cfg{PKG_DIR}     = "$ENV{HOME}/.cfg";

# We use a slightly hacked-up version of GNU stow which ignores CVS/
# directories and anything in ~/.cvsignore.
$cfg{STOW}        = "$RealBin/stow";

# This is where we configure which config packages we want installed locally.
$cfg{MAP_FILE}    = abs_path("$RealBin/../etc/config.map");

##############################################################################

use strict;
use warnings;

use File::Spec;
use FindBin qw($RealBin $RealScript);
use Getopt::Long;

use lib "$RealBin/../lib/perl5";
use Sh qw(abs_path);
use Cfg;
use Cfg::Utils qw(debug %opts %cfg);

Getopt::Long::Configure('no_ignore_case', 'bundling');
GetOptions(
  \%opts,
  'dry-run|n', 'sources|s', 'destinations|d', 'verbose|v+',
  'pkg-dir|p=s', 'target|t=s', 'map|m=s',
  'update|u', 'delete|D', 'remove-dangling|r', 'thorough|T',
)
  or usage();

sub usage {
  warn @_, "\n" if @_;

  ### N.B.!  If you change the below, don't forget to update the
  ### SYNOPSIS too!
  die <<EOUSAGE;
$RealScript [options] [pkg [pkg...]]

Installs the listed config packages, or all if none are specified.

Options [defaults in square brackets]:

  -u, --update               Update or fetch the chosen packages, then install
  -D, --delete               Delete the chosen packages, not install
  -n, --dry-run              Don't touch the disk

  -s, --sources              Only list source packages
  -d, --destinations         Only list destination packages

  -p, --pkg-dir=DIR          Change source package directory [$cfg{PKG_DIR}]
  -t, --target=TARGET-DIR    Change target directory [$cfg{TARGET_DIR}]
  -m, --map=MAP-FILE         Change config map file [$cfg{MAP_FILE}]

  -v, --verbose              Increase verbosity
  -r, --remove-dangling      If conflicts with dangling symlinks
                             are found, delete them.
  -T, --thorough             Don't prune subdirectories not in packages.
                             This may leave symlinks pointing to old
                             dirs which used to be in packages, but is
                             a lot slower.
EOUSAGE
}

$cfg{PKG_DIR}     = $opts{'pkg-dir'} if $opts{'pkg-dir'};
$cfg{TARGET_DIR}  = $opts{'target' } if $opts{'target' };
$cfg{MAP_FILE}    = $opts{'map'    } if $opts{'map'    };

-d $cfg{TARGET_DIR}
  or usage("$cfg{TARGET_DIR} is not a valid directory; aborting.\n");
-e $cfg{MAP_FILE}
  or usage("$cfg{MAP_FILE} does not exist; did you copy from $cfg{MAP_FILE}.template?\n");
-e $cfg{STOW}
  or usage("$cfg{STOW} not found!  Aborting.\n");

lstat($cfg{PKG_DIR});
if (-e _) {
  -d _ or usage("$cfg{PKG_DIR} must be a directory!  Aborting.\n");
}
else {
  mkdir $cfg{PKG_DIR} or die "mkdir($cfg{PKG_DIR}) failed: $!\n";
}

Cfg->do_registration();

if ($opts{sources} || $opts{destinations}) {
  Cfg->list_pkgs();
  exit 0;
}

my $queue = Cfg->get_pkg_queue;
if ($opts{update}) {
  Cfg->update($queue->pkgs);
  exit 0 if $opts{'dry-run'};
}
else {
  Cfg->ensure_src_local($queue->pkgs);
}

foreach my $section_and_pkgs ($queue->sections_and_pkgs) {
  my ($section, $pkgs) = @$section_and_pkgs;
  print "#@ ", $section->to_string, "\n";
  foreach my $pkg (@$pkgs) {
    my $description = $pkg->description;
    my $dst         = $pkg->dst;

    print "$description\n";

    $pkg->ensure_install_symlink;

    if ($pkg->deprecated) {
      print "#! deprecating: $description\n";
      $pkg->deprecate;
      return;
    }

    if ($opts{delete}) {
      $pkg->deinstall;
      print "# de-installed: $description\n";
    }
    else {
      $pkg->install;
      print "# installed: $description\n";
    }
  }
}

exit 0;

