#!/usr/bin/perl

# See cfgctl.pod for documentation.

use strict;
use warnings;

use File::Spec;
use FindBin qw($RealBin $RealScript);

use lib "$RealBin/../lib/perl5";
use Sh qw(abs_path);
use Cfg;
use Cfg::Cfg qw(%cfg);
use Cfg::CLI qw(debug %opts);

Cfg::CLI->process_options;
Cfg::CLI->check_options;
my $error = Cfg::Cfg->check;
Cfg::CLI::usage($error) if $error;
Cfg->do_registration;

if ($opts{list} || $opts{sources} || $opts{destinations}) {
  Cfg->list_pkgs();
  exit 0;
}

my $queue = Cfg->get_pkg_queue;
exit 1 if $queue->empty;

if ($opts{update}) {
  Cfg->batch_update($queue->pkgs);
  exit 0 if $opts{'dry-run'};
}
elsif ($opts{clone} || $opts{install} || $opts{erase}) {
  Cfg->batch_clone($queue->pkgs);
}
elsif ($opts{push}) {
  Cfg->batch_push($queue->pkgs);
}
elsif ($opts{pull}) {
  # Batch only makes sense for CVS which can't distinguish between
  # update and pull.
  #Cfg->batch_pull($queue->pkgs);
}
else {
  die "BUG";
}

foreach my $section_and_pkgs ($queue->sections_and_pkgs) {
  my ($section, $pkgs) = @$section_and_pkgs;
  debug(1, "# >> ", $section->to_string); 
  foreach my $pkg (@$pkgs) {
    my $description = $pkg->description;
    my $dst         = $pkg->dst;

    if ($pkg->disabled) {
      debug(2, "# Skipping disabled package: $description");
      next;
    }

    if ($pkg->deprecated) {
      debug(1, "#! DEPRECATING: $description");
      $pkg->deprecate;
      next;
    }

    if (! $pkg->src_local && ! $opts{erase}) {
      $pkg->clone_from_upstream;
    }
    else {
      if ($opts{update}) {
        $pkg->update;
      }
      elsif ($opts{pull}) {
        $pkg->pull_if_upstream_exists;
      }
      elsif ($opts{push}) {
        $pkg->push_if_upstream_exists;
      }
    }

    if ($opts{erase}) {
      if ($pkg->src_local) {
        # FIXME: erase depends on package being in config.map
        debug(1, "# Deinstalling: $description");
        $pkg->deinstall;
        $pkg->remove_relocation if $pkg->relocation;
      }
      else {
        die "Package sources are not present at ", $pkg->clone_to, "; aborting uninstall\n";
      }
    }
    elsif ($opts{install} || $opts{update}) {
      debug(1, "# Installing: $description");
      $pkg->ensure_relocation if $pkg->relocation && $pkg->src_local;
      $pkg->install;
    }
  }
}

exit 0;
